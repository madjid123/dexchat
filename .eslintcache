[{"D:\\WebDev\\BackEnd\\dexchat\\dexchat\\src\\index.tsx":"1","D:\\WebDev\\BackEnd\\dexchat\\dexchat\\src\\App.tsx":"2","D:\\WebDev\\BackEnd\\dexchat\\dexchat\\src\\app\\store.ts":"3","D:\\WebDev\\BackEnd\\dexchat\\dexchat\\src\\features\\user\\authSlice.ts":"4","D:\\WebDev\\BackEnd\\dexchat\\dexchat\\src\\URL.ts":"5","D:\\WebDev\\BackEnd\\dexchat\\dexchat\\src\\components\\UserSpace.tsx":"6","D:\\WebDev\\BackEnd\\dexchat\\dexchat\\src\\components\\NavBar.tsx":"7","D:\\WebDev\\BackEnd\\dexchat\\dexchat\\src\\components\\Auth\\Register.tsx":"8","D:\\WebDev\\BackEnd\\dexchat\\dexchat\\src\\components\\Auth\\Login.tsx":"9","D:\\WebDev\\BackEnd\\dexchat\\dexchat\\src\\components\\Conversation.tsx":"10","D:\\WebDev\\BackEnd\\dexchat\\dexchat\\src\\features\\user\\RoomsSlice.ts":"11","D:\\WebDev\\BackEnd\\dexchat\\dexchat\\src\\components\\Rooms.tsx":"12","D:\\WebDev\\BackEnd\\dexchat\\dexchat\\src\\features\\Conversation\\MessagesSlice.ts":"13"},{"size":340,"mtime":1628171918838,"results":"14","hashOfConfig":"15"},{"size":1314,"mtime":1628710604788,"results":"16","hashOfConfig":"15"},{"size":609,"mtime":1630708731044,"results":"17","hashOfConfig":"15"},{"size":3440,"mtime":1629251890981,"results":"18","hashOfConfig":"15"},{"size":58,"mtime":1628551194252,"results":"19","hashOfConfig":"15"},{"size":1585,"mtime":1629988175888,"results":"20","hashOfConfig":"15"},{"size":1395,"mtime":1628712199499,"results":"21","hashOfConfig":"15"},{"size":4981,"mtime":1628610366073,"results":"22","hashOfConfig":"15"},{"size":2985,"mtime":1628708648188,"results":"23","hashOfConfig":"15"},{"size":4924,"mtime":1630713253085,"results":"24","hashOfConfig":"15"},{"size":1525,"mtime":1629562042393,"results":"25","hashOfConfig":"15"},{"size":1623,"mtime":1630437700445,"results":"26","hashOfConfig":"15"},{"size":947,"mtime":1630713364597,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"1l4gn6v",{"filePath":"31","messages":"32","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"30"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"30"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"30"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\WebDev\\BackEnd\\dexchat\\dexchat\\src\\index.tsx",[],["58","59"],"D:\\WebDev\\BackEnd\\dexchat\\dexchat\\src\\App.tsx",["60","61"],"// React\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Redirect,\r\n  useHistory,\r\n} from \"react-router-dom\";\r\nimport { useEffect } from \"react\";\r\n\r\n//Redux\r\nimport { useSelector, useDispatch } from \"react-redux\"\r\n// Components\r\nimport Register from \"./components/Auth/Register\";\r\nimport NavBar from \"./components/NavBar\";\r\nimport Login from \"./components/Auth/Login\";\r\nimport UserSpace from \"./components/UserSpace\";\r\n\r\n// Styling\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"./App.css\";\r\nimport { AuthSelector, CheckisAuth } from \"./features/user/authSlice\";\r\n\r\n\r\n\r\nconst App = () => {\r\n  const dispatch = useDispatch()\r\n  const History = useHistory();\r\n  const { isAuth } = useSelector(AuthSelector)\r\n  useEffect(() => {\r\n    dispatch(CheckisAuth())\r\n\r\n  }, [!isAuth])\r\n\r\n\r\n  return (\r\n    <>\r\n      <Router >\r\n        <NavBar history={History} ></NavBar>\r\n        {isAuth && <Redirect to=\"/user\"></Redirect>}\r\n        <Switch>\r\n          <Route path=\"/user\">\r\n            <UserSpace  ></UserSpace>\r\n          </Route>\r\n          <Route path=\"/login\">\r\n            <Login\r\n            ></Login>\r\n          </Route>\r\n          <Route path=\"/register\">\r\n            <Register> </Register>\r\n          </Route>\r\n        </Switch>\r\n      </Router>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","D:\\WebDev\\BackEnd\\dexchat\\dexchat\\src\\app\\store.ts",[],"D:\\WebDev\\BackEnd\\dexchat\\dexchat\\src\\features\\user\\authSlice.ts",[],"D:\\WebDev\\BackEnd\\dexchat\\dexchat\\src\\URL.ts",[],"D:\\WebDev\\BackEnd\\dexchat\\dexchat\\src\\components\\UserSpace.tsx",["62","63","64"],"\r\nimport Rooms, { Room } from './Rooms'\r\nimport Conversation from './Conversation'\r\n\r\n\r\nimport { useState, useEffect } from 'react';\r\n\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { AuthSelector } from \"../features/user/authSlice\";\r\nimport { RoomsSelector, getRooms } from \"../features/user/RoomsSlice\"\r\n\r\ninterface User {\r\n    _id: string,\r\n    name: string\r\n}\r\nconst UserSpace = (props: any) => {\r\n    const [Member, setMember] = useState({} as any)\r\n    const dispatch = useDispatch();\r\n    const { currentUser, isAuth } = useSelector(AuthSelector)\r\n    const [clearMsgs, setClearMsgs] = useState(false);\r\n\r\n    useEffect(() => {\r\n        let id = undefined\r\n        if (currentUser !== undefined) {\r\n            id = currentUser._id\r\n            dispatch(getRooms({ id: id }))\r\n        }\r\n\r\n    }, [currentUser, isAuth])\r\n    const { rooms } = useSelector(RoomsSelector)\r\n    const setConversation = (index: number) => {\r\n        const room = rooms[index]\r\n\r\n        room.members.forEach(member => {\r\n\r\n            if (member._id !== currentUser?._id) {\r\n                console.log(member._id)\r\n                setMember(member)\r\n                return;\r\n            }\r\n        })\r\n\r\n    }\r\n    const SetClearMsgs = (b: boolean) => { setClearMsgs(b) }\r\n    return (\r\n        <div className=\"box-flex\" style={{ \"height\": \"100%\" }}>\r\n            <Rooms setConversation={setConversation}  ></Rooms>\r\n            <Conversation member={Member} clearMsgs={clearMsgs} setClearMsgs={SetClearMsgs}></Conversation>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default UserSpace;","D:\\WebDev\\BackEnd\\dexchat\\dexchat\\src\\components\\NavBar.tsx",[],"D:\\WebDev\\BackEnd\\dexchat\\dexchat\\src\\components\\Auth\\Register.tsx",[],"D:\\WebDev\\BackEnd\\dexchat\\dexchat\\src\\components\\Auth\\Login.tsx",[],"D:\\WebDev\\BackEnd\\dexchat\\dexchat\\src\\components\\Conversation.tsx",["65","66","67","68"],"D:\\WebDev\\BackEnd\\dexchat\\dexchat\\src\\features\\user\\RoomsSlice.ts",[],"D:\\WebDev\\BackEnd\\dexchat\\dexchat\\src\\components\\Rooms.tsx",["69","70","71","72","73","74"],"/* eslint-disable array-callback-return */\r\nimport { ProSidebar, Menu, MenuItem, SidebarHeader } from \"react-pro-sidebar\";\r\nimport \"react-pro-sidebar/dist/css/styles.css\";\r\nimport axios from \"axios\";\r\nimport URL from \"../URL\";\r\nimport { useState, useEffect, SetStateAction } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { AuthSelector } from \"../features/user/authSlice\";\r\nimport { RoomsSelector } from \"../features/user/RoomsSlice\"\r\n\r\n\r\nexport interface Room {\r\n  members: any[2];\r\n}\r\nconst Rooms = (props: any) => {\r\n\r\n  const { rooms } = useSelector(RoomsSelector)\r\n\r\n  const { currentUser, isAuth } = useSelector(AuthSelector)\r\n  return (\r\n    <>\r\n      <ProSidebar className=\"sidebar\">\r\n        <SidebarHeader>\r\n          <h1> Rooms</h1>\r\n          <br></br>\r\n        </SidebarHeader>\r\n        <Menu iconShape=\"square\" >\r\n          {\r\n            rooms.map((room: any, index: number) => {\r\n              return (\r\n                <MenuItem\r\n                  key={index}\r\n                  onClick={() => { props.setConversation(index) }}\r\n                >\r\n                  <img\r\n                    key={index}\r\n                    src={\"logo192.png\"}\r\n                    width=\"16\"\r\n                    height=\"16\"\r\n                    alt=\"\"\r\n                  />\r\n                  <div>\r\n                    {room.members.map((member: any) => { if (currentUser && member._id !== currentUser._id) return member.name; })}\r\n                  </div>\r\n                </MenuItem>)\r\n            })\r\n          }\r\n        </Menu>\r\n      </ProSidebar>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Rooms;\r\n","D:\\WebDev\\BackEnd\\dexchat\\dexchat\\src\\features\\Conversation\\MessagesSlice.ts",["75","76"],{"ruleId":"77","replacedBy":"78"},{"ruleId":"79","replacedBy":"80"},{"ruleId":"81","severity":1,"message":"82","line":33,"column":6,"nodeType":"83","endLine":33,"endColumn":15,"suggestions":"84"},{"ruleId":"81","severity":1,"message":"85","line":33,"column":7,"nodeType":"86","endLine":33,"endColumn":14},{"ruleId":"87","severity":1,"message":"88","line":2,"column":17,"nodeType":"89","messageId":"90","endLine":2,"endColumn":21},{"ruleId":"87","severity":1,"message":"91","line":12,"column":11,"nodeType":"89","messageId":"90","endLine":12,"endColumn":15},{"ruleId":"81","severity":1,"message":"82","line":29,"column":8,"nodeType":"83","endLine":29,"endColumn":29,"suggestions":"92"},{"ruleId":"87","severity":1,"message":"93","line":3,"column":14,"nodeType":"89","messageId":"90","endLine":3,"endColumn":20},{"ruleId":"87","severity":1,"message":"94","line":5,"column":23,"nodeType":"89","messageId":"90","endLine":5,"endColumn":31},{"ruleId":"87","severity":1,"message":"95","line":17,"column":26,"nodeType":"89","messageId":"90","endLine":17,"endColumn":32},{"ruleId":"81","severity":1,"message":"96","line":44,"column":8,"nodeType":"83","endLine":44,"endColumn":10,"suggestions":"97"},{"ruleId":"87","severity":1,"message":"98","line":4,"column":8,"nodeType":"89","messageId":"90","endLine":4,"endColumn":13},{"ruleId":"87","severity":1,"message":"99","line":5,"column":8,"nodeType":"89","messageId":"90","endLine":5,"endColumn":11},{"ruleId":"87","severity":1,"message":"100","line":6,"column":10,"nodeType":"89","messageId":"90","endLine":6,"endColumn":18},{"ruleId":"87","severity":1,"message":"101","line":6,"column":20,"nodeType":"89","messageId":"90","endLine":6,"endColumn":29},{"ruleId":"87","severity":1,"message":"102","line":6,"column":31,"nodeType":"89","messageId":"90","endLine":6,"endColumn":45},{"ruleId":"87","severity":1,"message":"95","line":19,"column":24,"nodeType":"89","messageId":"90","endLine":19,"endColumn":30},{"ruleId":"87","severity":1,"message":"103","line":3,"column":2,"nodeType":"89","messageId":"90","endLine":3,"endColumn":18},{"ruleId":"87","severity":1,"message":"104","line":43,"column":18,"nodeType":"89","messageId":"90","endLine":43,"endColumn":25},"no-native-reassign",["105"],"no-negated-in-lhs",["106"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["107"],"React Hook useEffect has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.","UnaryExpression","@typescript-eslint/no-unused-vars","'Room' is defined but never used.","Identifier","unusedVar","'User' is defined but never used.",["108"],"'Socket' is defined but never used.","'useStore' is defined but never used.","'isAuth' is assigned a value but never used.","React Hook useCallback has a missing dependency: 'messages'. Either include it or remove the dependency array.",["109"],"'axios' is defined but never used.","'URL' is defined but never used.","'useState' is defined but never used.","'useEffect' is defined but never used.","'SetStateAction' is defined but never used.","'createAsyncThunk' is defined but never used.","'reducer' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"110","fix":"111"},{"desc":"112","fix":"113"},{"desc":"114","fix":"115"},"Update the dependencies array to be: [dispatch]",{"range":"116","text":"117"},"Update the dependencies array to be: [currentUser, dispatch, isAuth]",{"range":"118","text":"119"},"Update the dependencies array to be: [messages]",{"range":"120","text":"121"},[787,796],"[dispatch]",[822,843],"[currentUser, dispatch, isAuth]",[1550,1552],"[messages]"]