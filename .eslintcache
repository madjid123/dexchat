[{"D:\\WebDev\\BackEnd\\dexchat\\dexchat\\src\\index.tsx":"1","D:\\WebDev\\BackEnd\\dexchat\\dexchat\\src\\App.tsx":"2","D:\\WebDev\\BackEnd\\dexchat\\dexchat\\src\\app\\store.ts":"3","D:\\WebDev\\BackEnd\\dexchat\\dexchat\\src\\features\\user\\authSlice.ts":"4","D:\\WebDev\\BackEnd\\dexchat\\dexchat\\src\\URL.ts":"5","D:\\WebDev\\BackEnd\\dexchat\\dexchat\\src\\components\\UserSpace.tsx":"6","D:\\WebDev\\BackEnd\\dexchat\\dexchat\\src\\components\\NavBar.tsx":"7","D:\\WebDev\\BackEnd\\dexchat\\dexchat\\src\\components\\Auth\\Register.tsx":"8","D:\\WebDev\\BackEnd\\dexchat\\dexchat\\src\\components\\Auth\\Login.tsx":"9","D:\\WebDev\\BackEnd\\dexchat\\dexchat\\src\\components\\Conversation.tsx":"10","D:\\WebDev\\BackEnd\\dexchat\\dexchat\\src\\components\\Contacts.tsx":"11"},{"size":340,"mtime":1628171918838,"results":"12","hashOfConfig":"13"},{"size":1314,"mtime":1628710604788,"results":"14","hashOfConfig":"13"},{"size":506,"mtime":1628560308451,"results":"15","hashOfConfig":"13"},{"size":3440,"mtime":1628703083773,"results":"16","hashOfConfig":"13"},{"size":58,"mtime":1628551194252,"results":"17","hashOfConfig":"13"},{"size":831,"mtime":1628611422954,"results":"18","hashOfConfig":"13"},{"size":1395,"mtime":1628712199499,"results":"19","hashOfConfig":"13"},{"size":4981,"mtime":1628610366073,"results":"20","hashOfConfig":"13"},{"size":2985,"mtime":1628708648188,"results":"21","hashOfConfig":"13"},{"size":2692,"mtime":1628615019775,"results":"22","hashOfConfig":"13"},{"size":1720,"mtime":1628551194260,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"1l4gn6v",{"filePath":"27","messages":"28","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"26"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"26"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"D:\\WebDev\\BackEnd\\dexchat\\dexchat\\src\\index.tsx",[],["49","50"],"D:\\WebDev\\BackEnd\\dexchat\\dexchat\\src\\App.tsx",["51","52"],"D:\\WebDev\\BackEnd\\dexchat\\dexchat\\src\\app\\store.ts",["53"],"import { configureStore, ThunkAction, Action } from \"@reduxjs/toolkit\";\r\nimport AuthReducer from \"../features/user/authSlice\";\r\nexport const store = configureStore({\r\n  reducer: {\r\n    AuthReducer,\r\n  },\r\n});\r\n\r\nexport type AppDispatch = typeof store.dispatch;\r\nexport type RootState = ReturnType<typeof store.getState>;\r\nexport type AppThunk<ReturnType = void> = ThunkAction<\r\n  ReturnType,\r\n  RootState,\r\n  unknown,\r\n  Action<string>\r\n>;\r\nfunction add(a : number , b: number): number{\r\n  return a + b;}\r\n","D:\\WebDev\\BackEnd\\dexchat\\dexchat\\src\\features\\user\\authSlice.ts",[],"D:\\WebDev\\BackEnd\\dexchat\\dexchat\\src\\URL.ts",[],"D:\\WebDev\\BackEnd\\dexchat\\dexchat\\src\\components\\UserSpace.tsx",[],"D:\\WebDev\\BackEnd\\dexchat\\dexchat\\src\\components\\NavBar.tsx",[],"D:\\WebDev\\BackEnd\\dexchat\\dexchat\\src\\components\\Auth\\Register.tsx",[],"D:\\WebDev\\BackEnd\\dexchat\\dexchat\\src\\components\\Auth\\Login.tsx",[],"D:\\WebDev\\BackEnd\\dexchat\\dexchat\\src\\components\\Conversation.tsx",["54","55"],"import React, { useState, useEffect } from 'react';\r\nimport { Button } from 'react-bootstrap';\r\nimport { io } from 'socket.io-client'\r\nimport { Menu, MenuItem } from 'react-pro-sidebar'\r\nimport { useSelector } from 'react-redux';\r\nimport { AuthSelector } from '../features/user/authSlice';\r\n\r\n\r\n\r\nvar socket = io(\"localhost:5001\", { transports: ['websocket'] })\r\nsocket.connect()\r\n\r\nfunction Conversation(props: any) {\r\n    const { currentUser, isAuth } = useSelector(AuthSelector)\r\n    const [message, setMessage] = useState(\"\" as string)\r\n    const [messages, setMessages] = useState([] as any[])\r\n\r\n    socket.emit('sendusr', { currentUser: currentUser })\r\n    socket.once(\"getmsg\", (data: any) => {\r\n        if (data.toid !== props.user.id) return;\r\n        const msgs = messages\r\n        msgs.push({ sender: data.username, message: data.message })\r\n        setMessages(msgs)\r\n    })\r\n\r\n    const onMessage = () => {\r\n        if (message === '') return;\r\n        console.log(props.user)\r\n        socket.emit('sendmsg', {\r\n            from: props.me.id,\r\n            name: props.user.name,\r\n            toid: props.user.id,\r\n            msg: message\r\n        })\r\n        const msgs = messages\r\n        msgs.push({ sender: props.me.username, message: message })\r\n        setMessages(msgs)\r\n        setMessage(\"\")\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (!props.clearMsgs) return;\r\n        props.setClearMsgs(false);\r\n        setMessages([]);\r\n\r\n    }, [props])\r\n\r\n    return (\r\n        <div className='conversation'>\r\n            {props.user.name &&\r\n                <div style={{ height: '95%', overflowY: 'auto', overflowX: 'hidden', scrollBehavior: 'smooth' }} >\r\n                    <h1>{props.user.name}</h1>\r\n                    <Menu iconShape='square'>\r\n\r\n                        {messages.map((msg, index) => {\r\n                            return (\r\n                                <MenuItem key={index}  >\r\n                                    <h5>{msg.sender}</h5>\r\n                                    <br></br>\r\n                                    <a>{msg.message}</a>\r\n                                    <hr style={{ color: '#fff' }}></hr>\r\n                                </MenuItem>\r\n                            );\r\n\r\n                        })}\r\n                    </Menu>\r\n                    <div className='footer'>\r\n                        <input className='footer-input' type='text' onChange={(e) => { setMessage(e.target.value) }} value={message}></input>\r\n                        <Button onClick={() => { onMessage() }} >send</Button>\r\n                    </div>\r\n\r\n                </div >\r\n            }\r\n        </div >\r\n    )\r\n\r\n}\r\nexport default Conversation","D:\\WebDev\\BackEnd\\dexchat\\dexchat\\src\\components\\Contacts.tsx",[],{"ruleId":"56","replacedBy":"57"},{"ruleId":"58","replacedBy":"59"},{"ruleId":"60","severity":1,"message":"61","line":33,"column":6,"nodeType":"62","endLine":33,"endColumn":15,"suggestions":"63"},{"ruleId":"60","severity":1,"message":"64","line":33,"column":7,"nodeType":"65","endLine":33,"endColumn":14},{"ruleId":"66","severity":1,"message":"67","line":17,"column":10,"nodeType":"68","messageId":"69","endLine":17,"endColumn":13},{"ruleId":"66","severity":1,"message":"70","line":14,"column":26,"nodeType":"68","messageId":"69","endLine":14,"endColumn":32},{"ruleId":"71","severity":1,"message":"72","line":60,"column":37,"nodeType":"73","endLine":60,"endColumn":40},"no-native-reassign",["74"],"no-negated-in-lhs",["75"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["76"],"React Hook useEffect has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.","UnaryExpression","@typescript-eslint/no-unused-vars","'add' is defined but never used.","Identifier","unusedVar","'isAuth' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-global-assign","no-unsafe-negation",{"desc":"77","fix":"78"},"Update the dependencies array to be: [dispatch]",{"range":"79","text":"80"},[787,796],"[dispatch]"]