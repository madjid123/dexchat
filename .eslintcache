[{"/home/madjid/Desktop/Programming/WebDev/backend/Dexchat-full/dexchat/src/index.tsx":"1","/home/madjid/Desktop/Programming/WebDev/backend/Dexchat-full/dexchat/src/App.tsx":"2","/home/madjid/Desktop/Programming/WebDev/backend/Dexchat-full/dexchat/src/URL.tsx":"3","/home/madjid/Desktop/Programming/WebDev/backend/Dexchat-full/dexchat/src/components/NavBar.tsx":"4","/home/madjid/Desktop/Programming/WebDev/backend/Dexchat-full/dexchat/src/components/UserSpace.tsx":"5","/home/madjid/Desktop/Programming/WebDev/backend/Dexchat-full/dexchat/src/components/Auth/Register.tsx":"6","/home/madjid/Desktop/Programming/WebDev/backend/Dexchat-full/dexchat/src/components/Auth/Login.tsx":"7","/home/madjid/Desktop/Programming/WebDev/backend/Dexchat-full/dexchat/src/components/Contacts.tsx":"8","/home/madjid/Desktop/Programming/WebDev/backend/Dexchat-full/dexchat/src/components/Conversation.tsx":"9"},{"size":283,"mtime":1628090956793,"results":"10","hashOfConfig":"11"},{"size":2234,"mtime":1628090956789,"results":"12","hashOfConfig":"11"},{"size":65,"mtime":1628090956789,"results":"13","hashOfConfig":"11"},{"size":1385,"mtime":1628090956793,"results":"14","hashOfConfig":"11"},{"size":886,"mtime":1628090956793,"results":"15","hashOfConfig":"11"},{"size":4874,"mtime":1628090956793,"results":"16","hashOfConfig":"11"},{"size":3281,"mtime":1628090956789,"results":"17","hashOfConfig":"11"},{"size":1763,"mtime":1628090956793,"results":"18","hashOfConfig":"11"},{"size":2515,"mtime":1628090956793,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"exwmwn",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"22"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40"},"/home/madjid/Desktop/Programming/WebDev/backend/Dexchat-full/dexchat/src/index.tsx",[],["41","42"],"/home/madjid/Desktop/Programming/WebDev/backend/Dexchat-full/dexchat/src/App.tsx",[],"/home/madjid/Desktop/Programming/WebDev/backend/Dexchat-full/dexchat/src/URL.tsx",["43"],"export default URL = { API_URL: \"http://localhost:5000\" } as any;","/home/madjid/Desktop/Programming/WebDev/backend/Dexchat-full/dexchat/src/components/NavBar.tsx",[],"/home/madjid/Desktop/Programming/WebDev/backend/Dexchat-full/dexchat/src/components/UserSpace.tsx",[],"/home/madjid/Desktop/Programming/WebDev/backend/Dexchat-full/dexchat/src/components/Auth/Register.tsx",[],"/home/madjid/Desktop/Programming/WebDev/backend/Dexchat-full/dexchat/src/components/Auth/Login.tsx",[],"/home/madjid/Desktop/Programming/WebDev/backend/Dexchat-full/dexchat/src/components/Contacts.tsx",[],"/home/madjid/Desktop/Programming/WebDev/backend/Dexchat-full/dexchat/src/components/Conversation.tsx",["44"],"import React, { useState, useEffect } from 'react';\r\nimport { Button } from 'react-bootstrap';\r\nimport { io } from 'socket.io-client'\r\nimport { Menu, MenuItem } from 'react-pro-sidebar'\r\n\r\n\r\n\r\nvar socket = io(\"localhost:5001\", { transports: ['websocket'] })\r\nsocket.connect()\r\n\r\nfunction Conversation(props: any) {\r\n\r\n    const [message, setMessage] = useState(\"\" as string)\r\n    const [messages, setMessages] = useState([] as any[])\r\n\r\n    socket.emit('sendusr', { me: props.me })\r\n    socket.once(\"getmsg\", (data: any) => {\r\n        if (data.toid !== props.user.id) return;\r\n        const msgs = messages\r\n        msgs.push({ sender: data.username, message: data.message })\r\n        setMessages(msgs)\r\n    })\r\n\r\n    const onMessage = () => {\r\n        if (message === '') return;\r\n        console.log(props.user)\r\n        socket.emit('sendmsg', {\r\n            from: props.me.id,\r\n            name: props.user.name,\r\n            toid: props.user.id,\r\n            msg: message\r\n        })\r\n        const msgs = messages\r\n        msgs.push({ sender: props.me.username, message: message })\r\n        setMessages(msgs)\r\n        setMessage(\"\")\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (!props.clearMsgs) return;\r\n        props.setClearMsgs(false);\r\n        setMessages([]);\r\n\r\n    }, [props])\r\n\r\n    return (\r\n        <div className='conversation'>\r\n            {props.user.name &&\r\n                <div style={{ height: '95%', overflowY: 'auto', overflowX: 'hidden', scrollBehavior: 'smooth' }} >\r\n                    <h1>{props.user.name}</h1>\r\n                    <Menu iconShape='square'>\r\n\r\n                        {messages.map((msg, index) => {\r\n                            return (\r\n                                <MenuItem key={index}  >\r\n                                    <h5>{msg.sender}</h5>\r\n                                    <br></br>\r\n                                    <a>{msg.message}</a>\r\n                                    <hr style={{ color: '#fff' }}></hr>\r\n                                </MenuItem>\r\n                            );\r\n\r\n                        })}\r\n                    </Menu>\r\n                    <div className='footer'>\r\n                        <input className='footer-input' type='text' onChange={(e) => { setMessage(e.target.value) }} value={message}></input>\r\n                        <Button onClick={() => { onMessage() }} >send</Button>\r\n                    </div>\r\n\r\n                </div >\r\n            }\r\n        </div >\r\n    )\r\n\r\n}\r\nexport default Conversation",{"ruleId":"45","replacedBy":"46"},{"ruleId":"47","replacedBy":"48"},{"ruleId":"45","severity":1,"message":"49","line":1,"column":16,"nodeType":"50","messageId":"51","endLine":1,"endColumn":19},{"ruleId":"52","severity":1,"message":"53","line":58,"column":37,"nodeType":"54","endLine":58,"endColumn":40},"no-native-reassign",["55"],"no-negated-in-lhs",["56"],"Read-only global 'URL' should not be modified.","Identifier","nativeReassign","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-global-assign","no-unsafe-negation"]